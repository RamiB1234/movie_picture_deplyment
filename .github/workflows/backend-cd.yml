name: Backend â€” CD

on:
  push:
    branches: [ main ]
    paths:
      - "starter/backend/**"
  workflow_dispatch:

jobs:
  lint:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: starter/backend
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install pipenv
        run: python -m pip install --upgrade pip pipenv

      - name: Install deps (dev)
        run: pipenv install --dev

      - name: Lint
        run: pipenv run lint

  test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: starter/backend
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install pipenv
        run: python -m pip install --upgrade pip pipenv

      - name: Install deps (dev)
        run: pipenv install --dev

      - name: Test
        run: pipenv run test

  build_and_push:
    runs-on: ubuntu-latest
    needs: [lint, test]
    defaults:
      run:
        working-directory: starter/backend
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Docker build (tag with git sha)
        run: docker build -t mp-backend:${{ github.sha }} .

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Tag & Push image to ECR
        env:
          REGISTRY: ${{ steps.ecr.outputs.registry }}   # <acct>.dkr.ecr.<region>.amazonaws.com
          REPO:     ${{ secrets.ECR_REPO_BACKEND }}     # mp-backend
          SHA:      ${{ github.sha }}
        run: |
          docker tag mp-backend:${SHA} ${REGISTRY}/${REPO}:${SHA}
          docker push ${REGISTRY}/${REPO}:${SHA}

  deploy:
    name: Deploy to EKS
    runs-on: ubuntu-latest
    needs: [build_and_push]
    defaults:
      run:
        shell: bash
        working-directory: starter/backend
    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      REPO:       ${{ secrets.ECR_REPO_BACKEND }}  # mp-backend
      SHA:        ${{ github.sha }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ secrets.AWS_REGION }}

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name movie-cluster --region "${AWS_REGION}"
          kubectl auth can-i get pods

      - name: Login to Amazon ECR (for registry URL)
        id: ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Install kustomize
        run: |
          curl -sLo kustomize.tar.gz \
            https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize%2Fv5.4.1/kustomize_v5.4.1_linux_amd64.tar.gz
          tar -xzf kustomize.tar.gz
          sudo mv kustomize /usr/local/bin/

      - name: Set image tag and apply
        env:
          REGISTRY: ${{ steps.ecr.outputs.registry }}
        run: |
          IMAGE_URI="${REGISTRY}/${REPO}:${SHA}"
          echo "Using IMAGE_URI=${IMAGE_URI}"
          cd k8s
          kustomize edit set image backend=${IMAGE_URI}
          kustomize build | kubectl apply -f -
