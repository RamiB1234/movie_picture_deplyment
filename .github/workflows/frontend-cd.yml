name: Frontend — CD

on:
  push:
    branches: [ main ]
    paths:
      - "starter/frontend/**" 
  workflow_dispatch:

env:
  REACT_APP_MOVIE_API_URL: "http://localhost:5000"

jobs:
  lint:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: starter/frontend
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Use Node from .nvmrc
        uses: actions/setup-node@v4
        with:
          node-version-file: "starter/frontend/.nvmrc"
          cache: "npm"
          cache-dependency-path: "starter/frontend/package-lock.json"

      - name: Run Lint
        run: |
          npm ci && npm run lint
  test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: starter/frontend
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Use Node from .nvmrc
        uses: actions/setup-node@v4
        with:
          node-version-file: "starter/frontend/.nvmrc"
          cache: "npm"
          cache-dependency-path: "starter/frontend/package-lock.json"
      - name: Run All Tests
        env:
          CI: true
        run: |
          npm ci
          npm test

  build_and_push:
    runs-on: ubuntu-latest
    needs: [lint, test]
    defaults:
      run:
        working-directory: starter/frontend
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Docker build (tag with git sha; use build-arg from env)
        run: |
          docker build \
            --build-arg REACT_APP_MOVIE_API_URL="${REACT_APP_MOVIE_API_URL}" \
            -t mp-frontend:${{ github.sha }} \
            .

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Tag & Push image to ECR
        env:
          REGISTRY: ${{ steps.ecr.outputs.registry }}     # <acct>.dkr.ecr.<region>.amazonaws.com
          REPO:     ${{ secrets.ECR_REPO_FRONTEND }}      # mp-frontend
          SHA:      ${{ github.sha }}
        run: |
          docker tag mp-frontend:${SHA} ${REGISTRY}/${REPO}:${SHA}
          docker push ${REGISTRY}/${REPO}:${SHA}
          echo "IMAGE_URI=${REGISTRY}/${REPO}:${SHA}" >> $GITHUB_ENV
  
  deploy:
    name: Deploy to EKS
    runs-on: ubuntu-latest
    needs: [build_and_push]
    defaults:
      run:
        shell: bash
        working-directory: starter/frontend  
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
      ​  uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ secrets.AWS_REGION }}

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name movie-cluster --region "$AWS_REGION"
          kubectl auth can-i get pods

      # Install kustomize (needed for `kustomize edit set image`)
      - name: Install kustomize
        run: |
          curl -sLo kustomize.tar.gz https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize%2Fv5.4.1/kustomize_v5.4.1_linux_amd64.tar.gz
          tar -xzf kustomize.tar.gz
          sudo mv kustomize /usr/local/bin/

      - name: Set image tag with kustomize
        env:
          IMAGE_URI: ${{ env.IMAGE_URI }} 
        run: |
          cd k8s
          kustomize edit set image frontend=${IMAGE_URI}   # for backend: `backend=${IMAGE_URI}`
          kustomize build | kubectl apply -f -
